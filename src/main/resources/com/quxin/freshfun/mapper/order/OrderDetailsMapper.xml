<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quxin.freshfun.dao.OrderDetailsMapper">
  <resultMap id="BaseResultMap" type="com.quxin.freshfun.model.order.OrderDetailsPOJO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId"/>
    <result column="order_id" jdbcType="BIGINT" property="orderId" />
    <result column="order_details_id" jdbcType="VARCHAR" property="orderDetailsId" />
    <result column="goods_id" jdbcType="INTEGER" property="goodsId" />
    <result column="actual_price" jdbcType="INTEGER" property="actualPrice" />
    <result column="delivery_num" jdbcType="VARCHAR" property="deliveryNum" />
    <result column="address_id" jdbcType="INTEGER" property="addressId" />
    <result column="delivery_name" jdbcType="VARCHAR" property="deliveryName" />
    <result column="comment_id" jdbcType="INTEGER" property="commentId" />
    <result column="payment_method" jdbcType="INTEGER" property="paymentMethod" />
    <result column="pay_time" jdbcType="BIGINT" property="payTime" />
    <result column="count" jdbcType="INTEGER" property="count"/>
    <result column="order_detailscol" jdbcType="VARCHAR" property="orderDetailscol" />
    <result column="comment_status" jdbcType="INTEGER" property="commentStatus"/>
    <result column="order_status" jdbcType="INTEGER" property="orderStatus" />
    <result column="agent_id" jdbcType="BIGINT" property="agentId" />
    <result column="agent_price" jdbcType="INTEGER" property="agentPrice"/>
    <result column="fetcher_id" jdbcType="INTEGER" property="fetcherId" />
    <result column="fetcher_price" jdbcType="INTEGER" property="fetcherPrice"/>
    <result column="pay_plateform" jdbcType="INTEGER" property="payPlateform" />
    <result column="is_deleted" jdbcType="INTEGER" property="isDeleted" />
    <result column="create_date" jdbcType="BIGINT" property="createDate" />
    <result column="update_date" jdbcType="BIGINT" property="updateDate" />
    <result column="delivery_name" jdbcType="VARCHAR" property="deliveryName"/>
    <result column="is_limit" jdbcType="INTEGER" property="isLimit"/>
    <result column="recive_time" jdbcType="INTEGER" property="reciveTime"/>
    <result column="delivery_time" jdbcType="BIGINT" property="deliveryTime"/>
    <result column="pay_price" jdbcType="INTEGER" property="payPrice"/>
    <result column="goods_cost" jdbcType="INTEGER" property="goodsCost"/>
    <result column="name" jdbcType="VARCHAR" property="name"/>
    <result column="tel" jdbcType="VARCHAR" property="tel"/>
    <result column="city" jdbcType="VARCHAR" property="city"/>
    <result column="address" jdbcType="VARCHAR" property="address"/>
    <result column="remark" jdbcType="VARCHAR" property="remark"/>
    <result column="delivery_remark" jdbcType="VARCHAR" property="deliveryRemark"/>
    <result column="extra" jdbcType="VARCHAR" property="extra"/>
    <result column="transaction_id" jdbcType="VARCHAR" property="transactionId"/>
    <result column="province_code" jdbcType="INTEGER" property="provCode"/>
    <result column="city_code" jdbcType="INTEGER" property="cityCode"/>
    <result column="district_code" jdbcType="INTEGER" property="distCode"/>
    <result column="fans_app_id" jdbcType="BIGINT" property="fansAppId"/>
    <result column="app_id" jdbcType="BIGINT" property="appId"/>
    <association property="goods" column="goods_id" select="com.quxin.freshfun.dao.GoodsMapper.selectGoodsById"></association>
  </resultMap>

  <resultMap id="UserIdResultMap" type="java.lang.Long">
    <result column="id" jdbcType="BIGINT" property="id"/>
  </resultMap>

  <resultMap id="OrderNumMap" type="com.quxin.freshfun.model.order.OrderNumPOJO">
    <result column="orderNum" jdbcType="INTEGER" property="orderNum"/>
    <result column="order_status" jdbcType="INTEGER" property="orderStatus"/>
  </resultMap>

  <sql id="Base_Column_List">
    id,user_id , order_id, order_details_id, goods_id, actual_price, delivery_num, delivery_name , address_id,
    comment_id, payment_method, pay_time, comment_status, order_status, refund_status,
    comment_status, pay_plateform, is_deleted, create_date, update_date
  </sql>

  <!--查询所有订单-->
  <select id="selectBackstageOrders" parameterType="com.quxin.freshfun.model.order.OrderQueryParam" resultMap="BaseResultMap">
    select `id` as `order_id`,`actual_price`,`user_id`,`pay_time`,`count`,`order_status`,`goods_id`,`pay_price`,`name`,`tel`,`city`,`address`,`create_date`,`delivery_num`,`delivery_name`,`pay_price`,`goods_cost`,`remark`,`province_code`,`city_code`,`district_code`,`fans_app_id`,`app_id`
      from order_details
      where is_deleted = 0
    <if test="appId != null">
      and (app_id = #{appId} or (fans_app_id=#{appId} and app_id = 888888))
    </if>
    <if test="orderStatus != null and orderStatus != 0 and orderStatus != 70">
      and order_status = #{orderStatus}
    </if>
    <if test="orderStatus == 70">
      and order_status in (70,100)
    </if>
    <if test='userId != null and userId != ""'>
      and user_id = #{userId}
    </if>
    <if test='orderId != null and orderId != ""'>
      and id = #{orderId}
    </if>
    <if test="beginTime != null and endTime != null">
      and create_date between #{beginTime} and #{endTime}
    </if>
    <if test='deliveryName != null and deliveryName != ""'>
      and `name` LIKE CONCAT(#{deliveryName},'%')
    </if>
    <if test="appIdList != null and appIdList.size() > 0">
      and `app_id` in
      <foreach item="item" index="index" collection="appIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="goodsIdList != null and goodsIdList.size() > 0">
      and goods_id in
      <foreach item="item" index="index" collection="goodsIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="userIdList != null and userIdList.size() > 0">
      and user_id in
      <foreach item="item" index="index" collection="userIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
     order by create_date desc
    <if test="page != null and pageSize != null">
      limit #{page},#{pageSize}
    </if>
  </select>
  <!--查询导出订单-->
  <select id="selectExportOrder" parameterType="com.quxin.freshfun.model.order.OrderQueryParam" resultMap="BaseResultMap">
    select `id` as `order_id`,`actual_price`,`user_id`,`pay_time`,`count`,`order_status`,`goods_id`,`pay_price`,`name`,`tel`,`city`,`address`,`create_date`,`delivery_num`,`delivery_name`,`pay_price`,`goods_cost`,`remark`,`province_code`,`city_code`,`district_code`,`fans_app_id`,`app_id`
    from order_details
    where is_deleted = 0
    <if test="appId != null">
      and (app_id = #{appId} or (fans_app_id=#{appId} and app_id = 888888))
    </if>
    <if test="orderStatus != 0 and orderStatus != 70">
      and order_status = #{orderStatus}
    </if>
    <if test="orderStatus == 0">
      and order_status >= 20
    </if>
    <if test="orderStatus == 70">
      and order_status in (70,100)
    </if>
    <if test='userId != null and userId != ""'>
      and user_id = #{userId}
    </if>
    <if test='orderId != null and orderId != ""'>
      and id = #{orderId}
    </if>
    <if test="beginTime != null and endTime != null">
      and create_date between #{beginTime} and #{endTime}
    </if>
    <if test='deliveryName != null and deliveryName != ""'>
      and `name` LIKE CONCAT(#{deliveryName},'%')
    </if>
    <if test="appIdList != null and appIdList.size() > 0">
      and `app_id` in
      <foreach item="item" index="index" collection="appIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="goodsIdList != null and goodsIdList.size() > 0">
      and goods_id in
      <foreach item="item" index="index" collection="goodsIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="userIdList != null and userIdList.size() > 0">
      and user_id in
      <foreach item="item" index="index" collection="userIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    order by create_date desc limit 10000
  </select>

  <!--查询所有订单数量-->
  <select id="selectBackstageOrdersCount" parameterType="com.quxin.freshfun.model.order.OrderQueryParam" resultType="java.lang.Integer" >
    select count(*) from order_details where is_deleted = 0
    <if test="appId != null">
      and (app_id = #{appId} or (fans_app_id=#{appId} and app_id = 888888))
    </if>
    <if test="orderStatus != null and orderStatus != 0 and orderStatus != 70">
      and order_status = #{orderStatus}
    </if>
    <if test="orderStatus == 70">
      and order_status in (70,100)
    </if>
    <if test='userId != null and userId != ""'>
      and user_id = #{userId}
    </if>
    <if test='orderId != null and orderId != ""'>
      and id = #{orderId}
    </if>
    <if test="beginTime != null and endTime != null">
      and create_date between #{beginTime} and #{endTime}
    </if>
    <if test='deliveryName != null and deliveryName !=""'>
      and `name` LIKE CONCAT(#{deliveryName},'%')
    </if>
    <if test="appIdList != null and appIdList.size() > 0">
      and `app_id` in
      <foreach item="item" index="index" collection="appIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="goodsIdList != null and goodsIdList.size() > 0">
      and goods_id in
      <foreach item="item" index="index" collection="goodsIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="userIdList != null and userIdList.size() > 0">
      and user_id in
      <foreach item="item" index="index" collection="userIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
  </select>
  <!--查询已完成订单-->
  <select id="selectFinishOrder" resultMap="BaseResultMap">
    select `id` as `order_id`,`user_id`,`count`,`order_status`,`pay_plateform`,`goods_id`,`pay_price`,`name`,`tel`,`city`,`address`,`create_date`,`delivery_num`,`delivery_name`,`pay_price`,`goods_cost`,`remark`,`province_code`,`city_code`,`district_code` from order_details where order_status in (70,100) and is_deleted = 0 order by create_date desc limit #{currentPage},#{pageSize}
  </select>
  <select id="selectFinishOrderCount" resultType="java.lang.Integer">
    select count(*) from order_details where order_status in (70,100) and is_deleted = 0
  </select>
  <!--根据条件查询订单数量-->
  <select id="selectOrderNumCondition" resultMap="OrderNumMap">
    select count(*) as `orderNum`,order_status from order_details where is_deleted = 0
    <if test="appId != null">
      and (app_id = #{appId} or (fans_app_id=#{appId} and app_id = 888888))
    </if>
    <if test='userId != null and userId != ""'>
      and user_id = #{userId}
    </if>
    <if test='orderId != null and orderId != ""'>
      and id = #{orderId}
    </if>
    <if test="beginTime != null and endTime != null">
      and create_date between #{beginTime} and #{endTime}
    </if>
    <if test='deliveryName != null and deliveryName !=""'>
      and `name` LIKE CONCAT(#{deliveryName},'%')
    </if>
    <if test="appIdList != null and appIdList.size() > 0">
      and `app_id` in
      <foreach item="item" index="index" collection="appIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="goodsIdList != null and goodsIdList.size() > 0">
      and goods_id in
      <foreach item="item" index="index" collection="goodsIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="userIdList != null and userIdList.size() > 0">
      and user_id in
      <foreach item="item" index="index" collection="userIdList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    GROUP BY order_status
  </select>
  <!--查询订单数目-->
  <select id="selectOrderNum" resultMap="OrderNumMap">
    select count(1) as `orderNum`,order_status from order_details where is_deleted = 0
    <if test="appId != null">
      and (app_id = #{appId} or (fans_app_id=#{appId} and app_id = 888888))
    </if>
    GROUP BY order_status
  </select>
  <!--查询销售信息-->
  <select id="selectSaleInfo" parameterType="java.lang.Long" resultType="com.quxin.freshfun.model.order.OrderSaleInfo">
    select count(*) as `orderNumber` from order_details where order_status >= 30 and (app_id=#{appId} or (fans_app_id=#{appId} and app_id = 888888)) and is_deleted = 0
  </select>

  <!--根据订单状态查询订单列表-->
  <select id="selectOrderByOrderStatus" resultMap="BaseResultMap">
    select `id` as `order_id`,`user_id`,`count`,`order_status`,`pay_plateform`,`goods_id`,`pay_price`,`delivery_num`,`delivery_name`,`pay_price`,`goods_cost`,`remark`,`name`,`tel`,`city`,`address`,`create_date`,`province_code`,`city_code`,`district_code`
    from order_details where is_deleted = 0 and order_status = #{orderStatus}
    order by create_date desc
    limit #{currentPage},#{pageSize}
  </select>
  <!--查询待收货数量-->
  <select id="selectOrderByOrderStatusCount" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select count(*) from order_details where is_deleted = 0 and order_status = #{orderStatus}
  </select>

  <!--根据appId批量查询下单数-->
  <select id="selectCountByAppId" parameterType="java.util.Arrays" resultMap="BaseResultMap">
    select app_id , fans_app_id,actual_price from order_details where is_deleted = 0 and (order_status<![CDATA[>]]>20 or
    order_status=20) and
    (app_id in
    <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
      #{item}
    </foreach>
     OR
    app_id = 888888 and fans_app_id in
    <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
      #{item}
    </foreach>
    )
  </select>

  <!--订单发货-->
  <update id="deliverOrder" parameterType="java.util.Map">
    update order_details set delivery_num=#{deliveryNum},order_status=50,delivery_name=#{deliveryName},delivery_time=#{deliveryTime},goods_cost=#{goodsCost} where id = #{orderId}
  </update>

  <!--订单备注-->
  <update id="orderRemark" parameterType="java.util.Map" >
    update order_details set remark = #{remark} where id = #{orderId}
  </update>

  <!--删除订单-->
  <update id="orderDel" parameterType="java.lang.Long">
    update order_details set is_deleted = 1 where id = #{orderId}
  </update>

  <!--退款-->
  <!--根据订单编号查询微信返回的订单编号-->
  <select id="selectOrderTransactionIdInfo" parameterType="java.lang.Long" resultType="com.quxin.freshfun.model.order.OrderDetailsPOJO">
    select `id`,`order_id` as `orderId`,`payment_method` as `paymentMethod`,`transaction_id` as `transactionId`,`actual_price` as `actualPrice`,`pay_url` as `payUrl` from order_details where id = #{orderId}
  </select>
  <!--根据父级订单编号查询订单信息-->
  <select id="selectOrderIdByParentId" parameterType="java.lang.Long" resultMap="UserIdResultMap">
    select `id`, from order_details where user_id = #{userId}
  </select>

  <!--查询订单支付金额-->
  <select id="selectOrderPayPrice" parameterType="java.lang.Long" resultType="java.lang.Integer">
    select `actual_price` as `actualPrice` from order_details where id = #{orderId}
  </select>

  <!--修改商品退款状态-->
  <update id="updateOrderRefundStatus">
    update order_details set order_status = 20,update_date=#{updateDate} where id = #{orderId}
  </update>

  <!--根据订单编号查询退款之前状态-->
  <select id="selectOrderRefundState" parameterType="java.lang.Long" resultType="java.lang.String">
    select delivery_remarke from order_details where id = #{orderId}
  </select>
  
  <update id="updateOrderState" >
    update order_details set order_status = #{orderStatus},update_date=#{updateDate} where id = #{orderId}
  </update>

  <!--根据订单Id查询订单详情-->
  <select id="selectOrderDetailByOrderId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select `id` as `order_id`,`user_id`,`actual_price`,`count`,`order_status`,`pay_plateform`,`goods_id`,`pay_price`,`name`,`tel`,`city`,`address`,`create_date`,`delivery_num`,`delivery_name`,`pay_price`,`goods_cost`,`remark`,`province_code`,`city_code`,`district_code` from order_details where is_deleted = 0 and id = #{orderId}
  </select>
  <!--查询父级订单信息-->
  <select id="selectParentPayPrice" parameterType="java.lang.Long" resultType="com.quxin.freshfun.model.order.OrdersPOJO">
    select `actual_price` as `actualPrice` from orders where id = #{orderId}
  </select>
</mapper>